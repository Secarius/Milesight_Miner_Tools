# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'minertools_gui_main_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

#####################################################################
import os
import sys
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
from zipfile import ZipFile
import subprocess
from subprocess import Popen
import requests
import urllib.request
import threading
import ipaddress
import socket
from numpy import genfromtxt
from packaging import version
import pathlib
from assets import images_rc
from src import ssh_comms
import webbrowser
import time
import shutil
import configparser
from gui.minertools_gui_settings_popup import Ui_Dialog as Settingsdiag

version_build = "2.0.1"
settingsini = configparser.ConfigParser()
dir_path = '%s\\MinerTools\\' % os.environ['APPDATA'] 
settingsspath = '%s\\settings.ini' % dir_path
snapconfspath = '%s\\snapconf.config' % dir_path
optionspath = '%s\\options.config' % dir_path

def write_file():
    settingsini.write(open(settingsspath, 'w'))

# Check if Config directroy exists and create miner config
if not os.path.exists(dir_path):
    os.makedirs(dir_path)
try:
    f = open(optionspath)
except IOError:
    f = open(optionspath,"w+")
    f.write("#MinerName,IP,User,Password,Port\n")
    f.close
finally:
    f.close()
if not os.path.exists(settingsspath):
    settingsini['systemsettings'] = {'highdpi': '1', 'showlogo': '1', 'snapurl': 'http://snapshots-wtf.sensecapmx.cloud/snap-', 'snaplatesturl': 'http://snapshots-wtf.sensecapmx.cloud/latest-snap.json', 'constxtcolor': '#A4E87F', 'consbackcolor': '#212121'}
    write_file()
#load settingsini options
settingsini.read(settingsspath)
global highdpi
global snapurl
global snaplatesturl
global constxtcolor
global consbackcolor
global showlogo
global logopath
try:
    highdpi = settingsini.get('systemsettings', 'highdpi')
except configparser.NoOptionError:
    settingsini.set('systemsettings', 'highdpi', '1')
    highdpi = "1"
    write_file()
try:
    showlogo = settingsini.get('systemsettings', 'showlogo')
except configparser.NoOptionError:
    settingsini.set('systemsettings', 'showlogo', '0')
    write_file()
try:
    snapurl = settingsini.get('systemsettings', 'snapurl')
except configparser.NoOptionError:
    settingsini.set('systemsettings', 'snapurl', 'http://snapshots-wtf.sensecapmx.cloud/snap-')
    write_file()
try:
    snaplatesturl = settingsini.get('systemsettings', 'snaplatesturl')
except configparser.NoOptionError:
    settingsini.set('systemsettings', 'snaplatesturl', 'http://snapshots-wtf.sensecapmx.cloud/latest-snap.json')
    write_file()
try:
    constxtcolor = settingsini.get('systemsettings', 'constxtcolor')
except configparser.NoOptionError:
    settingsini.set('systemsettings', 'constxtcolor', '#A4E87F')
    write_file()
try:
    consbackcolor = settingsini.get('systemsettings', 'consbackcolor')
except configparser.NoOptionError:
    settingsini.set('systemsettings', 'consbackcolor', '#212121')
    write_file()
if showlogo == "1":
    logopath = "background-image:url(:/Logo/logo.png);"
else:
    logopath = ""
#load miner config
try:
    minerconfig = genfromtxt(optionspath, skip_header=1, delimiter=",", dtype='unicode', loose=True, invalid_raise=False,comments=None,deletechars='')
except IOError:
    msg = QMessageBox()
    msg.setIcon(QMessageBox.Critical)
    msg.setText("Cloud not load miners config!")
    msg.setWindowTitle("Error")
    msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
    msg.exec_()

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1136, 717)
        MainWindow.setMinimumSize(QtCore.QSize(1136, 0))
        MainWindow.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setContentsMargins(5, 1, 5, 5)
        self.verticalLayout.setSpacing(1)
        self.verticalLayout.setObjectName("verticalLayout")
        self.top_menu_layout = QtWidgets.QHBoxLayout()
        self.top_menu_layout.setSpacing(1)
        self.top_menu_layout.setObjectName("top_menu_layout")
        self.label_select_miner = QtWidgets.QLabel(self.centralwidget)
        self.label_select_miner.setMinimumSize(QtCore.QSize(100, 0))
        self.label_select_miner.setMaximumSize(QtCore.QSize(100, 16777215))
        font = QtGui.QFont()
        font.setPixelSize(15)
        font.setBold(False)
        font.setWeight(50)
        self.label_select_miner.setFont(font)
        self.label_select_miner.setWhatsThis("")
        self.label_select_miner.setObjectName("label_select_miner")
        self.top_menu_layout.addWidget(self.label_select_miner)
        self.combo_select_miner = QtWidgets.QComboBox(self.centralwidget)
        self.combo_select_miner.setMinimumSize(QtCore.QSize(190, 0))
        font = QtGui.QFont()
        font.setPixelSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.combo_select_miner.setFont(font)
        self.combo_select_miner.setWhatsThis("")
        self.combo_select_miner.setObjectName("combo_select_miner")
        self.top_menu_layout.addWidget(self.combo_select_miner)
        self.button_open_in_browser = QtWidgets.QPushButton(self.centralwidget)
        self.button_open_in_browser.setMinimumSize(QtCore.QSize(115, 26))
        self.button_open_in_browser.setMaximumSize(QtCore.QSize(115, 26))
        font = QtGui.QFont()
        font.setPixelSize(13)
        font.setBold(True)
        font.setWeight(75)
        font.setKerning(True)
        self.button_open_in_browser.setFont(font)
        self.button_open_in_browser.setWhatsThis("")
        self.button_open_in_browser.setObjectName("button_open_in_browser")
        self.top_menu_layout.addWidget(self.button_open_in_browser)
        self.button_helium_explorer = QtWidgets.QPushButton(self.centralwidget)
        self.button_helium_explorer.setMinimumSize(QtCore.QSize(117, 26))
        self.button_helium_explorer.setMaximumSize(QtCore.QSize(117, 26))
        font = QtGui.QFont()
        font.setPixelSize(13)
        font.setBold(True)
        font.setWeight(75)
        font.setKerning(True)
        self.button_helium_explorer.setFont(font)
        self.button_helium_explorer.setWhatsThis("")
        self.button_helium_explorer.setObjectName("button_helium_explorer")
        self.top_menu_layout.addWidget(self.button_helium_explorer)
        self.button_settings = QtWidgets.QPushButton(self.centralwidget)
        self.button_settings.setMinimumSize(QtCore.QSize(110, 26))
        self.button_settings.setMaximumSize(QtCore.QSize(110, 26))
        font = QtGui.QFont()
        font.setPixelSize(13)
        font.setBold(True)
        font.setWeight(75)
        font.setKerning(True)
        self.button_settings.setFont(font)
        self.button_settings.setWhatsThis("")
        self.button_settings.setObjectName("button_settings")
        self.top_menu_layout.addWidget(self.button_settings)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.top_menu_layout.addItem(spacerItem)
        self.button_check_update = QtWidgets.QPushButton(self.centralwidget)
        self.button_check_update.setMinimumSize(QtCore.QSize(102, 26))
        self.button_check_update.setMaximumSize(QtCore.QSize(102, 26))
        font = QtGui.QFont()
        font.setPixelSize(13)
        font.setBold(True)
        font.setWeight(75)
        font.setKerning(True)
        self.button_check_update.setFont(font)
        self.button_check_update.setWhatsThis("")
        self.button_check_update.setObjectName("button_check_update")
        self.top_menu_layout.addWidget(self.button_check_update)
        self.label_version = QtWidgets.QLabel(self.centralwidget)
        self.label_version.setMinimumSize(QtCore.QSize(50, 26))
        self.label_version.setMaximumSize(QtCore.QSize(48, 26))
        font = QtGui.QFont()
        font.setPixelSize(13)
        self.label_version.setFont(font)
        self.label_version.setWhatsThis("")
        self.label_version.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_version.setObjectName("label_version")
        self.top_menu_layout.addWidget(self.label_version)
        self.label_version_numer = QtWidgets.QLabel(self.centralwidget)
        self.label_version_numer.setMinimumSize(QtCore.QSize(35, 26))
        self.label_version_numer.setMaximumSize(QtCore.QSize(42, 26))
        font = QtGui.QFont()
        font.setPixelSize(13)
        self.label_version_numer.setFont(font)
        self.label_version_numer.setWhatsThis("")
        self.label_version_numer.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_version_numer.setTextFormat(QtCore.Qt.PlainText)
        self.label_version_numer.setTextInteractionFlags(QtCore.Qt.NoTextInteraction)
        self.label_version_numer.setObjectName("label_version_numer")
        self.top_menu_layout.addWidget(self.label_version_numer)
        self.button_donate = QtWidgets.QPushButton(self.centralwidget)
        self.button_donate.setMinimumSize(QtCore.QSize(56, 26))
        self.button_donate.setMaximumSize(QtCore.QSize(56, 16777215))
        font = QtGui.QFont()
        font.setPixelSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.button_donate.setFont(font)
        self.button_donate.setObjectName("button_donate")
        self.top_menu_layout.addWidget(self.button_donate)
        self.logo_milesight = QtWidgets.QPushButton(self.centralwidget)
        self.logo_milesight.setMinimumSize(QtCore.QSize(100, 26))
        self.logo_milesight.setMaximumSize(QtCore.QSize(100, 26))
        self.logo_milesight.setWhatsThis("")
        self.logo_milesight.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.logo_milesight.setAutoFillBackground(False)
        self.logo_milesight.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/Logo/milesight-logo.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.logo_milesight.setIcon(icon)
        self.logo_milesight.setIconSize(QtCore.QSize(100, 200))
        self.logo_milesight.setCheckable(False)
        self.logo_milesight.setFlat(True)
        self.logo_milesight.setObjectName("logo_milesight")
        self.top_menu_layout.addWidget(self.logo_milesight)
        self.verticalLayout.addLayout(self.top_menu_layout)
        self.text_console = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.text_console.setEnabled(True)
        
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.text_console.sizePolicy().hasHeightForWidth())
        self.text_console.setSizePolicy(sizePolicy)
        self.text_console.setMinimumSize(QtCore.QSize(0, 0))
        self.text_console.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.text_console.setSizeIncrement(QtCore.QSize(0, 0))
        font = QtGui.QFont()
        font.setPixelSize(15)
        font.setFamily("Courier New")
        self.text_console.setFont(font)
        self.text_console.setWhatsThis("")
        self.text_console.setStyleSheet("background-color:%s;color:%s;%sbackground-repeat:no-repeat;background-position:center right;" % (consbackcolor,constxtcolor,logopath))
        self.text_console.setPlaceholderText("")
        self.text_console.setObjectName("text_console")
        self.verticalLayout.addWidget(self.text_console)
        self.bottom_functions_layout = QtWidgets.QHBoxLayout()
        self.bottom_functions_layout.setSpacing(1)
        self.bottom_functions_layout.setObjectName("bottom_functions_layout")
        self.button_status = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.button_status.sizePolicy().hasHeightForWidth())
        self.button_status.setSizePolicy(sizePolicy)
        self.button_status.setMinimumSize(QtCore.QSize(50, 30))
        self.button_status.setMaximumSize(QtCore.QSize(16777215, 30))
        font = QtGui.QFont()
        font.setPixelSize(13)
        font.setBold(True)
        font.setWeight(75)
        font.setKerning(True)
        self.button_status.setFont(font)
        self.button_status.setWhatsThis("")
        self.button_status.setObjectName("button_status")
        self.bottom_functions_layout.addWidget(self.button_status)
        self.button_ping = QtWidgets.QPushButton(self.centralwidget)
        self.button_ping.setMinimumSize(QtCore.QSize(40, 30))
        self.button_ping.setMaximumSize(QtCore.QSize(16777215, 30))
        font = QtGui.QFont()
        font.setPixelSize(13)
        font.setBold(True)
        font.setWeight(75)
        font.setKerning(True)
        self.button_ping.setFont(font)
        self.button_ping.setWhatsThis("")
        self.button_ping.setObjectName("button_ping")
        self.bottom_functions_layout.addWidget(self.button_ping)
        self.button_sync_status = QtWidgets.QPushButton(self.centralwidget)
        self.button_sync_status.setMinimumSize(QtCore.QSize(87, 30))
        self.button_sync_status.setMaximumSize(QtCore.QSize(16777215, 30))
        font = QtGui.QFont()
        font.setPixelSize(13)
        font.setBold(True)
        font.setWeight(75)
        font.setKerning(True)
        self.button_sync_status.setFont(font)
        self.button_sync_status.setWhatsThis("")
        self.button_sync_status.setObjectName("button_sync_status")
        self.bottom_functions_layout.addWidget(self.button_sync_status)
        self.button_peer_book = QtWidgets.QPushButton(self.centralwidget)
        self.button_peer_book.setMinimumSize(QtCore.QSize(77, 30))
        self.button_peer_book.setMaximumSize(QtCore.QSize(16777215, 30))
        font = QtGui.QFont()
        font.setPixelSize(13)
        font.setBold(True)
        font.setWeight(75)
        font.setKerning(True)
        self.button_peer_book.setFont(font)
        self.button_peer_book.setWhatsThis("")
        self.button_peer_book.setObjectName("button_peer_book")
        self.bottom_functions_layout.addWidget(self.button_peer_book)
        self.button_console_log = QtWidgets.QPushButton(self.centralwidget)
        self.button_console_log.setMinimumSize(QtCore.QSize(88, 30))
        self.button_console_log.setMaximumSize(QtCore.QSize(16777215, 30))
        font = QtGui.QFont()
        font.setPixelSize(13)
        font.setBold(True)
        font.setWeight(75)
        font.setKerning(True)
        self.button_console_log.setFont(font)
        self.button_console_log.setWhatsThis("")
        self.button_console_log.setObjectName("button_console_log")
        self.bottom_functions_layout.addWidget(self.button_console_log)
        self.button_process_logs = QtWidgets.QPushButton(self.centralwidget)
        self.button_process_logs.setMinimumSize(QtCore.QSize(95, 30))
        self.button_process_logs.setMaximumSize(QtCore.QSize(16777215, 30))
        font = QtGui.QFont()
        font.setPixelSize(13)
        font.setBold(True)
        font.setWeight(75)
        font.setKerning(True)
        self.button_process_logs.setFont(font)
        self.button_process_logs.setWhatsThis("")
        self.button_process_logs.setObjectName("button_process_logs")
        self.bottom_functions_layout.addWidget(self.button_process_logs)
        self.button_disk_usage = QtWidgets.QPushButton(self.centralwidget)
        self.button_disk_usage.setMinimumSize(QtCore.QSize(80, 30))
        self.button_disk_usage.setMaximumSize(QtCore.QSize(16777215, 30))
        font = QtGui.QFont()
        font.setPixelSize(13)
        font.setBold(True)
        font.setWeight(75)
        font.setKerning(True)
        self.button_disk_usage.setFont(font)
        self.button_disk_usage.setWhatsThis("")
        self.button_disk_usage.setObjectName("button_disk_usage")
        self.bottom_functions_layout.addWidget(self.button_disk_usage)
        self.button_fast_sync = QtWidgets.QPushButton(self.centralwidget)
        self.button_fast_sync.setMinimumSize(QtCore.QSize(75, 30))
        self.button_fast_sync.setMaximumSize(QtCore.QSize(16777215, 30))
        font = QtGui.QFont()
        font.setPixelSize(13)
        font.setBold(True)
        font.setWeight(75)
        font.setKerning(True)
        self.button_fast_sync.setFont(font)
        self.button_fast_sync.setWhatsThis("")
        self.button_fast_sync.setObjectName("button_fast_sync")
        self.bottom_functions_layout.addWidget(self.button_fast_sync)
        self.button_restart_lora = QtWidgets.QPushButton(self.centralwidget)
        self.button_restart_lora.setMinimumSize(QtCore.QSize(99, 30))
        self.button_restart_lora.setMaximumSize(QtCore.QSize(16777215, 30))
        font = QtGui.QFont()
        font.setPixelSize(13)
        font.setBold(True)
        font.setWeight(75)
        font.setKerning(True)
        self.button_restart_lora.setFont(font)
        self.button_restart_lora.setWhatsThis("")
        self.button_restart_lora.setObjectName("button_restart_lora")
        self.bottom_functions_layout.addWidget(self.button_restart_lora)
        self.button_resume_sync = QtWidgets.QPushButton(self.centralwidget)
        self.button_resume_sync.setMinimumSize(QtCore.QSize(97, 30))
        self.button_resume_sync.setMaximumSize(QtCore.QSize(16777215, 30))
        font = QtGui.QFont()
        font.setPixelSize(13)
        font.setBold(True)
        font.setWeight(75)
        font.setKerning(True)
        self.button_resume_sync.setFont(font)
        self.button_resume_sync.setWhatsThis("")
        self.button_resume_sync.setObjectName("button_resume_sync")
        self.bottom_functions_layout.addWidget(self.button_resume_sync)
        self.button_restart_docker = QtWidgets.QPushButton(self.centralwidget)
        self.button_restart_docker.setMinimumSize(QtCore.QSize(110, 30))
        self.button_restart_docker.setMaximumSize(QtCore.QSize(16777215, 30))
        font = QtGui.QFont()
        font.setPixelSize(13)
        font.setBold(True)
        font.setWeight(75)
        font.setKerning(True)
        self.button_restart_docker.setFont(font)
        self.button_restart_docker.setWhatsThis("")
        self.button_restart_docker.setObjectName("button_restart_docker")
        self.bottom_functions_layout.addWidget(self.button_restart_docker)
        self.button_quagga_restart = QtWidgets.QPushButton(self.centralwidget)
        self.button_quagga_restart.setMinimumSize(QtCore.QSize(112, 30))
        self.button_quagga_restart.setMaximumSize(QtCore.QSize(16777215, 30))
        font = QtGui.QFont()
        font.setPixelSize(13)
        font.setBold(True)
        font.setWeight(75)
        font.setKerning(True)
        self.button_quagga_restart.setFont(font)
        self.button_quagga_restart.setWhatsThis("")
        self.button_quagga_restart.setObjectName("button_quagga_restart")
        self.bottom_functions_layout.addWidget(self.button_quagga_restart)
        self.button_restart_miner = QtWidgets.QPushButton(self.centralwidget)
        self.button_restart_miner.setMinimumSize(QtCore.QSize(100, 30))
        self.button_restart_miner.setMaximumSize(QtCore.QSize(16777215, 30))
        font = QtGui.QFont()
        font.setPixelSize(13)
        font.setBold(True)
        font.setWeight(75)
        font.setKerning(True)
        self.button_restart_miner.setFont(font)
        self.button_restart_miner.setWhatsThis("")
        self.button_restart_miner.setObjectName("button_restart_miner")
        self.bottom_functions_layout.addWidget(self.button_restart_miner)
        self.verticalLayout.addLayout(self.bottom_functions_layout)
        self.bottom_send_command_layout = QtWidgets.QHBoxLayout()
        self.bottom_send_command_layout.setSpacing(5)
        self.bottom_send_command_layout.setObjectName("bottom_send_command_layout")
        self.lineedit_line_command = QtWidgets.QLineEdit(self.centralwidget)
        self.lineedit_line_command.setMinimumSize(QtCore.QSize(0, 30))
        self.lineedit_line_command.setMaximumSize(QtCore.QSize(16777215, 30))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPixelSize(13)
        self.lineedit_line_command.setFont(font)
        self.lineedit_line_command.setWhatsThis("")
        self.lineedit_line_command.setObjectName("lineedit_line_command")
        self.bottom_send_command_layout.addWidget(self.lineedit_line_command)
        self.button_send_command = QtWidgets.QPushButton(self.centralwidget)
        self.button_send_command.setMinimumSize(QtCore.QSize(115, 30))
        self.button_send_command.setMaximumSize(QtCore.QSize(115, 30))
        font = QtGui.QFont()
        font.setPixelSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.button_send_command.setFont(font)
        self.button_send_command.setWhatsThis("")
        self.button_send_command.setObjectName("button_send_command")
        self.bottom_send_command_layout.addWidget(self.button_send_command)
        self.verticalLayout.addLayout(self.bottom_send_command_layout)
        self.verticalLayout.setStretch(1, 10)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1136, 21))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        MainWindow.setMenuBar(self.menubar)
        self.action_exit = QtWidgets.QAction(MainWindow)
        self.action_exit.setObjectName("action_exit")
        self.action_edit_config = QtWidgets.QAction(MainWindow)
        self.action_edit_config.setObjectName("action_edit_config")
        self.action_import_config = QtWidgets.QAction(MainWindow)
        self.action_import_config.setObjectName("action_import_config")
        self.action_export_config = QtWidgets.QAction(MainWindow)
        self.action_export_config.setObjectName("action_export_config")
        self.menuFile.addAction(self.action_edit_config)
        self.menuFile.addAction(self.action_import_config)
        self.menuFile.addAction(self.action_export_config)
        self.menuFile.addAction(self.action_exit)
        self.menubar.addAction(self.menuFile.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
##################################################################
# Button Actions
        self.action_edit_config.triggered.connect(self.edit_config)
        self.action_export_config.triggered.connect(self.export_config)
        self.action_import_config.triggered.connect(self.import_config)
        self.action_exit.triggered.connect(self.exit_window)

        self.savepath = 'log.txt'
        self.s = ssh_comms.ssh_comms()

        self.button_settings.clicked.connect(self.open_settings)

        self.button_send_command.clicked.connect(self.run_command_func)
        self.button_status.clicked.connect(self.status_but_func)
        self.button_ping.clicked.connect(self.miner_ping_func)
        self.button_peer_book.clicked.connect(self.run_peer_book_func)
        self.button_resume_sync.clicked.connect(self.sync_resume_func)
        self.button_sync_status.clicked.connect(self.sync_status_func)
        self.button_console_log.clicked.connect(self.docker_console_log_func)
        self.button_disk_usage.clicked.connect(self.disk_usage_func)
        self.button_fast_sync.clicked.connect(self.update_but_func)
        self.button_quagga_restart.clicked.connect(self.quagga_but_func)
        self.button_check_update.clicked.connect(self.get_url_paths)
        self.button_open_in_browser.clicked.connect(self.run_open_miner_website)
        self.button_restart_miner.clicked.connect(self.restart_miner_func)
        self.lineedit_line_command.returnPressed.connect(self.run_command_func)
        self.button_restart_lora.clicked.connect(self.restart_lora_func)
        self.button_helium_explorer.clicked.connect(self.open_explorer_func)
        self.logo_milesight.clicked.connect(self.open_milesight_func)
        self.button_restart_docker.clicked.connect(self.restart_docker_func)
        self.button_process_logs.clicked.connect(self.process_logs_func)
        self.button_donate.clicked.connect(self.donate_text_func)
    
    def readconfig(self):
        settingsini.read(settingsspath)
        global highdpi
        global snapurl
        global snaplatesturl
        global constxtcolor
        global consbackcolor
        global showlogo
        global logopath
        try:
            highdpi = settingsini.get('systemsettings', 'highdpi')
        except configparser.NoOptionError:
            settingsini.set('systemsettings', 'highdpi', '1')
            highdpi = "1"
            write_file()
        try:
            showlogo = settingsini.get('systemsettings', 'showlogo')
        except configparser.NoOptionError:
            settingsini.set('systemsettings', 'showlogo', '1')
            write_file()
        try:
            snapurl = settingsini.get('systemsettings', 'snapurl')
        except configparser.NoOptionError:
            settingsini.set('systemsettings', 'snapurl', 'http://snapshots-wtf.sensecapmx.cloud/snap-')
            write_file()
        try:
            snaplatesturl = settingsini.get('systemsettings', 'snaplatesturl')
        except configparser.NoOptionError:
            settingsini.set('systemsettings', 'snaplatesturl', 'http://snapshots-wtf.sensecapmx.cloud/latest-snap.json')
            write_file()
        try:
            constxtcolor = settingsini.get('systemsettings', 'constxtcolor')
        except configparser.NoOptionError:
            settingsini.set('systemsettings', 'constxtcolor', '#A4E87F')
            write_file()
        try:
            consbackcolor = settingsini.get('systemsettings', 'consbackcolor')
        except configparser.NoOptionError:
            settingsini.set('systemsettings', 'consbackcolor', '#212121')
            write_file()
        if showlogo == "1":
            logopath = "background-image:url(:/Logo/logo.png);"
        else:
            logopath = ""
        self.text_console.setStyleSheet("background-color:%s;color:%s;%sbackground-repeat:no-repeat;background-position:center right" % (consbackcolor,constxtcolor,logopath))

    def open_settings(self):
        try:
            dialogset = QtWidgets.QDialog()
            dialogset.ui = Settingsdiag()
            dialogset.ui.setupUi(dialogset)
            dialogset.setWindowFlags(QtCore.Qt.WindowType.CustomizeWindowHint)
            dialogset.setWindowFlags(dialogset.windowFlags() & ~QtCore.Qt.WindowType.WindowMinimizeButtonHint & QtCore.Qt.WindowType.WindowCloseButtonHint)
            dialogset.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
            dialogset.exec_()
            dialogset.show()
            self.readconfig()
            self.updatecombo()
        except Exception as e:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText(str(e))
            msg.setWindowTitle("Error")
            msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
            msg.exec_()


    def get_url_paths(self):
        try:
            self.clear_fbdata()
            self.update_fbdata(f'Updating helium-miner-log-analyzer ...\n')
            urllib.request.urlretrieve("https://raw.githubusercontent.com/inigoflores/helium-miner-log-analyzer/main/processlogs.php","processlogs/processlogs.php")
            self.update_fbdata(f'Finished\n\n')
            r = requests.get("https://api.github.com/repos/Secarius/Milesight_Miner_Tools/git/trees/main?recursive=1")
            data = r.json()
            url = [item['path'] for item in data['tree']]
            updatepackage = [string for string in url if 'minertools' in string]
            zippackage = [string for string in updatepackage if '.zip' in string]
            zippackage = zippackage[0]
            online_version = zippackage.replace(".zip", "")
            online_version = online_version.replace("installer/minertools_", "")
            if (version.parse(version_build) < version.parse(online_version)):
                self.update_fbdata(f'New Version availible!\n')
                updateurl = "https://github.com/Secarius/Milesight_Miner_Tools/raw/main/%s" % zippackage
                reply = QtWidgets.QMessageBox.question(self, 'Message',
                    "New Update availible. Do you want to update?", QtWidgets.QMessageBox.Yes | 
                    QtWidgets.QMessageBox.No, QtWidgets.QMessageBox.No)
                if reply == QtWidgets.QMessageBox.Yes:
                    self.update_fbdata(f'Downloading new Version....\n')
                    urllib.request.urlretrieve(updateurl,"miner-update.zip")
                    self.update_fbdata(f'Downloading updater....\n')
                    urllib.request.urlretrieve("https://github.com/Secarius/Milesight_Miner_Tools/raw/main/installer/updater.zip","updater.zip")
                    self.update_fbdata(f'Extracting updater....\n')
                    with ZipFile('updater.zip', 'r') as zipOjk:
                        zipOjk.extractall()
                    updatepath = pathlib.Path().resolve()
                    updater = str(updatepath)
                    self.update_fbdata(f'Starting Update....\n')
                    Popen("%s\\updater\miner-update.exe" % updater)
                    sys.exit()
            else:
                self.update_fbdata(f'No Update availible!\n')
                reply = QtWidgets.QMessageBox.question(self, 'Message',
                    "No Update available", QtWidgets.QMessageBox.Ok)
        except Exception as e:     # most generic exception you can catch
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText(str(e))
            msg.setWindowTitle("Error")
            msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
            msg.exec_()

    def check_update(self):
        try:
            self.update_fbdata(f'Updating helium-miner-log-analyzer ...\n')
            urllib.request.urlretrieve("https://raw.githubusercontent.com/inigoflores/helium-miner-log-analyzer/main/processlogs.php","processlogs/processlogs.php")
            self.update_fbdata(f'Finished\n\n')
            self.clear_fbdata()
            r = requests.get("https://api.github.com/repos/Secarius/Milesight_Miner_Tools/git/trees/main?recursive=1")
            data = r.json()
            url = [item['path'] for item in data['tree']]
            updatepackage = [string for string in url if 'minertools' in string]
            zippackage = [string for string in updatepackage if '.zip' in string]
            zippackage = zippackage[0]
            online_version = zippackage.replace(".zip", "")
            online_version = online_version.replace("installer/minertools_", "")
            if (version.parse(version_build) < version.parse(online_version)):
                self.update_fbdata(f'===================================================\n')
                self.update_fbdata(f'Version Status:  New Version availible!\n')
                self.update_fbdata(f'If you want to update, please press "Check Update".\n')
                self.update_fbdata(f'The update can take some time.\n')
                self.update_fbdata(f'===================================================\n')
            else:
                self.update_fbdata(f'=======================================\n')
                self.update_fbdata(f'Version Status: Miner Tools up to date!\n')
                self.update_fbdata(f'=======================================\n')
        except Exception as e:     # most generic exception you can catch
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText(str(e))
            msg.setWindowTitle("Error")
            msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
            msg.exec_()

    def donate_text_func(self):
        try:
            self.clear_fbdata()
            self.update_fbdata(f'\n')
            self.update_fbdata(f'Hi,\n')
            self.update_fbdata(f'if you like what i am doing and you think my work with Miner Tools is worth it, \n')
            self.update_fbdata(f'feel free to leave me some HNT for my work :)\n')
            self.update_fbdata(f'\n')
            self.update_fbdata(f'My HNT Wallet Address:\n')
            self.update_fbdata(f'13nB5a9ZtNySJSDbzBY5uaWxToqX8Zb8V4SqDwGGBJLXYQvrSEj\n')
            self.update_fbdata(f'\n\n')
            self.update_fbdata(f'If you want to leave a feedback, feel free to join the Miner Tools Discord Thread on Milesight Discord: \n')
            self.update_fbdata(f'https://discord.com/channels/920883777138458755/939230368115093556')
        except Exception as e:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText(str(e))
            msg.setWindowTitle("Error")
            msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
            msg.exec_()

    def howto(self):
        try:
            self.update_fbdata(f'\n')
            self.update_fbdata(f'How to use the Miner Tools:\n')
            self.update_fbdata(f'\n')
            self.update_fbdata(f'Get started blog post from DCYeahThatsMe:')
            self.update_fbdata(f'https://minertools.doit.net')
            self.update_fbdata(f'\n\n')
            self.update_fbdata(f'Status:          get short status of miner docker container.\n')
            self.update_fbdata(f'PING:            starts a ping test form inside the miner to google.com\n')
            self.update_fbdata(f'Sync Status:     see if sync ist active/paused\n')
            self.update_fbdata(f'Peer Book:       displays peerbook informations\n')
            self.update_fbdata(f'Console Log:     displays the miner docker console log\n')
            self.update_fbdata(f'Process Logs:    displaying the console.log readable\n')
            self.update_fbdata(f'Disk Usage:      displays the usage state of the miner disk\n')
            self.update_fbdata(f'Fast Sync:       triggers miner to fast sync the blockchain via snapshot download\n')
            self.update_fbdata(f'Restart Lora:    restarts the LoRa Packet Forwarder Service\n')
            self.update_fbdata(f'Resume Sync:     tries to resume sync if paused\n')
            self.update_fbdata(f'Restart Docker:  reboots the miner docker\n')
            self.update_fbdata(f'Quagga Restart:  restarts the Quagga Services\n')
            self.update_fbdata(f'Restart Miner:   reboots the whole miner\n')
            self.update_fbdata(f'\n')
            self.update_fbdata(f'Open in Browser: opens you miner ip in the browser\n')
            self.update_fbdata(f'Helium Explorer: opens miner on explorer.helium.com in the browser\n')
            self.update_fbdata(f'Settings:        Open Settings Menu\n')
            self.update_fbdata(f'\n')
            self.update_fbdata(f'Check Update:    runs check for new version of Miner Tools and updates if wanted, also get the latest processlogs.php\n')
            self.update_fbdata(f'\n')
            self.update_fbdata(f'You can run custom commands in the free text field at the bottom, \njust type them and hit "Enter" / "Return" e.g. -> uptime\n')
        except Exception as e:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText(str(e))
            msg.setWindowTitle("Error")
            msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
            msg.exec_()

    def updatecombo(self):
        try:
            global minerconfig
            try:
                f = open(optionspath)
            except IOError:
                f = open(optionspath,"w+")
                f.write("#MinerName,IP,User,Password,Port\n")
                f.close
            finally:
                f.close()
            try:
                minerconfig = genfromtxt(optionspath, skip_header=1, delimiter=",", dtype='unicode', loose=True, invalid_raise=False,comments=None,deletechars='')
            except IOError:
                    reply = QtWidgets.QMessageBox.question(self, 'Message',
                    "There is error with the configfile\nIts located in: %appdata%\MinerTools", QtWidgets.QMessageBox.Ok)
            self.combo_select_miner.clear()
            if len(minerconfig.shape) > 1:
                for x in range(len(minerconfig)):
                    self.combo_select_miner.addItem(minerconfig[x][0])
            else:
                if len(minerconfig.shape) == 1 and not minerconfig.shape == (0,):
                    self.combo_select_miner.addItem(minerconfig[0])
                else:
                    msg = QMessageBox()
                    msg.setIcon(QMessageBox.Critical)
                    msg.setText("Config is empty!")
                    msg.setWindowTitle("Error")
                    msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
                    msg.exec_()
        except Exception as e:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText(str(e))
            msg.setWindowTitle("Error")
            msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
            msg.exec_()

    def open_milesight_func(self):
        try:
            webbrowser.open("https://www.milesight-iot.com/lorawan/hotspot-miner-helium/", new=0, autoraise=True)
        except Exception as e:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText(str(e))
            msg.setWindowTitle("Error")
            msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
            msg.exec_()

    def run_open_miner_website(self):
        try:
            combopos = self.combo_select_miner.currentIndex()
            if len(minerconfig.shape) == 1 and not minerconfig.shape == (0,):
                addr = minerconfig[1]
            else:
                addr = minerconfig[combopos][1]
            minerurl = 'http://%s/' % addr
            webbrowser.open(minerurl, new=0, autoraise=True)
        except Exception as e:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText(str(e))
            msg.setWindowTitle("Error")
            msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
            msg.exec_()
        
    def edit_config(self):
        try:
            os.system('notepad.exe ' + optionspath)
            self.updatecombo()
        except Exception as e:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText(str(e))
            msg.setWindowTitle("Error")
            msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
            msg.exec_()

    def export_config(self):
        name = QtWidgets.QFileDialog.getSaveFileName(self, 'Save File')
        if not name[0] == '':
            with open(optionspath) as f:
                with open(name[0], "w") as f1:
                    for line in f:
                        f1.write(line)
                f1.close()
            f.close()
        self.updatecombo()

    def import_config(self):
        name = QtWidgets.QFileDialog.getOpenFileName(self, 'Open File')
        if not name[0] == '':
            with open(name[0]) as f:
                with open(optionspath, "w") as f1:
                    for line in f:
                        f1.write(line)
                f1.close()
            f.close()
        self.updatecombo()

    def exit_window(self):
        quit()

    def run_sync_commands(self):
        try:
            self.update_fbdata(f'Syncing . . . This might take a minute . . .\n')
            self.log = ''
            f.close
            height = '** ERROR WHILE EXECUTING CURL CMD **'
            cmds = ['docker exec miner miner repair sync_pause',
                    'docker exec miner miner repair sync_cancel',
                    'curl %s' % snaplatesturl,
                    'cd /mnt/mmcblk0p1/miner_data/snap && rm snap-*',
                    'cd /mnt/mmcblk0p1/miner_data/snap && wget %s' % snapurl,
                    'docker exec miner miner snapshot load /var/data/snap/snap- &',
                    'docker exec miner miner repair sync_state',
                    'docker exec miner miner repair sync_resume']
            do_sync_resume = False
            for idx, cmd in enumerate(cmds):
                if idx == 7 and do_sync_resume: # sync resume
                    chk = True
                    while chk:
                        self.update_fbdata(f'${cmd}\n')
                        out, stderr = self.s.exec_cmd(cmd=cmd)
                        self.update_fbdata(out)
                        if stderr != '': self.update_fbdata(f'STDERR: {stderr}')
                        self.log += f'#{cmd}\n{out}'
                        if stderr != '': self.log += f'STDERR: {stderr}'
                        chk = 'failed' in out
                        self.text_console.ensureCursorVisible()
                else:
                    if idx == 4: # wget
                        cmd += height
                    elif idx == 5: # snapshot load
                        cmd = f"{cmd.split(' &')[0]}{height}{cmd.split('snap-')[1]}"
                    self.update_fbdata(f'${cmd}\n')
                    out, stderr = self.s.exec_cmd(cmd=cmd)
                    self.update_fbdata(out)
                    if stderr != '':
                        if idx == 4: stderr = '\n'.join(stderr.split('\n')[:13])+'\n'+' '*30+'..........\n'+'\n'.join(stderr.split('\n')[-10:])
                        self.update_fbdata(f'STDERR: {stderr}')
                    if idx == 2: # curl
                        height = out.split('height":')[1].split('}')[0]
                    elif idx == 6: # sync_state
                        do_sync_resume = 'sync active' not in out
                    self.log += f'#{cmd}\n{out}'
                    if stderr != '': self.log += f'STDERR: {stderr}'
            self.update_fbdata(f'*** DONE ***\n')
            self.text_console.ensureCursorVisible()
            self.save()
            self.s.disconnect()
        except Exception as e:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText(str(e))
            msg.setWindowTitle("Error")
            msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
            msg.exec_()


    #*************************** BUTTON FUNCTIONS ***************************
    def restart_docker_func(self):
        if not self.s.is_alive():
            if self.conn_sequence() == None:
                return
            messageBox = QtWidgets.QMessageBox(self)
            messageBox.setWindowTitle("Restart Docker")
            messageBox.setText("Do you realy want to restart the Helium Docker Container?")
            
            buttonoptionA = messageBox.addButton("Yes", QtWidgets.QMessageBox.YesRole)    
            buttonoptionB = messageBox.addButton("No", QtWidgets.QMessageBox.AcceptRole)  
            messageBox.setDefaultButton(buttonoptionB)
            
            messageBox.exec_()

            if messageBox.clickedButton() == buttonoptionA:
                self.tmpthread = threading.Thread(target=self.run_restart_docker_cmd)
                self.tmpthread.daemon = True
                self.tmpthread.start()
            elif messageBox.clickedButton() == buttonoptionB:
                self.tmpthread = threading.Thread(target=self.run_abort_cmd)
                self.tmpthread.daemon = True
                self.tmpthread.start()
        else:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("Another function already in progress. Please be patient.")
            msg.setWindowTitle("Error")
            msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
            msg.exec_()

    def sync_status_func(self):
        if not self.s.is_alive():
            if self.conn_sequence() == None:
                return
            self.tmpthread = threading.Thread(target=self.run_sync_status_log_cmd)
            self.tmpthread.daemon = True
            self.tmpthread.start()
        else:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("Another function already in progress. Please be patient.")
            msg.setWindowTitle("Error")
            msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
            msg.exec_()

    def docker_console_log_func(self):
        if not self.s.is_alive():
            if self.conn_sequence() == None:
                return
            self.tmpthread = threading.Thread(target=self.docker_console_log_cmd)
            self.tmpthread.daemon = True
            self.tmpthread.start()
        else:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("Another function already in progress. Please be patient.")
            msg.setWindowTitle("Error")
            msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
            msg.exec_()

    def restart_miner_func(self):
        if not self.s.is_alive():
            if self.conn_sequence() == None:
                return
            messageBox = QtWidgets.QMessageBox(self)
            messageBox.setWindowTitle("Restart Miner")
            messageBox.setText("Do you realy want to reboot the miner?")
            
            buttonoptionA = messageBox.addButton("Yes", QtWidgets.QMessageBox.YesRole)    
            buttonoptionB = messageBox.addButton("No", QtWidgets.QMessageBox.AcceptRole)  
            messageBox.setDefaultButton(buttonoptionB)
            
            messageBox.exec_()

            if messageBox.clickedButton() == buttonoptionA:
                self.tmpthread = threading.Thread(target=self.run_restart_miner_cmd)
                self.tmpthread.daemon = True
                self.tmpthread.start()
            elif messageBox.clickedButton() == buttonoptionB:
                self.tmpthread = threading.Thread(target=self.run_abort_cmd)
                self.tmpthread.daemon = True
                self.tmpthread.start()
        else:
            smsg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("Another function already in progress. Please be patient.")
            msg.setWindowTitle("Error")
            msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
            msg.exec_()

    def disk_usage_func(self):
        if not self.s.is_alive():
            if self.conn_sequence() == None:
                return
            self.tmpthread = threading.Thread(target=self.run_disk_usage_cmd)
            self.tmpthread.daemon = True
            self.tmpthread.start()
        else:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("Another function already in progress. Please be patient.")
            msg.setWindowTitle("Error")
            msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
            msg.exec_()

    def update_but_func(self):
        if not self.s.is_alive():
            if self.conn_sequence() == None:
                return
            self.tmpthread = threading.Thread(target=self.run_sync_commands)
            self.tmpthread.daemon = True
            self.tmpthread.start()
        else:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("Another function already in progress. Please be patient.")
            msg.setWindowTitle("Error")
            msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
            msg.exec_()

    def quagga_but_func(self):
        if not self.s.is_alive():
            if self.conn_sequence() == None:
                return
            messageBox = QtWidgets.QMessageBox(self)
            messageBox.setWindowTitle("Restart Quagga")
            messageBox.setText("Do you realy want to restart Quagga?")
            
            buttonoptionA = messageBox.addButton("Yes", QtWidgets.QMessageBox.YesRole)    
            buttonoptionB = messageBox.addButton("No", QtWidgets.QMessageBox.AcceptRole)  
            messageBox.setDefaultButton(buttonoptionB)
            
            messageBox.exec_()

            if messageBox.clickedButton() == buttonoptionA:
                self.tmpthread = threading.Thread(target=self.run_quagga_cmd)
                self.tmpthread.daemon = True
                self.tmpthread.start()
            elif messageBox.clickedButton() == buttonoptionB:
                self.tmpthread = threading.Thread(target=self.run_abort_cmd)
                self.tmpthread.daemon = True
                self.tmpthread.start()
        else:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("Another function already in progress. Please be patient.")
            msg.setWindowTitle("Error")
            msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
            msg.exec_()

    def restart_lora_func(self):
        if not self.s.is_alive():
            if self.conn_sequence() == None:
                return
            messageBox = QtWidgets.QMessageBox(self)
            messageBox.setWindowTitle("Restart LoRa")
            messageBox.setText("Do you realy want to restart LoRa?")
            
            buttonoptionA = messageBox.addButton("Yes", QtWidgets.QMessageBox.YesRole)    
            buttonoptionB = messageBox.addButton("No", QtWidgets.QMessageBox.AcceptRole)  
            messageBox.setDefaultButton(buttonoptionB)
            
            messageBox.exec_()

            if messageBox.clickedButton() == buttonoptionA:
                self.tmpthread = threading.Thread(target=self.run_restart_lora_cmd)
                self.tmpthread.daemon = True
                self.tmpthread.start()
            elif messageBox.clickedButton() == buttonoptionB:
                self.tmpthread = threading.Thread(target=self.run_abort_cmd)
                self.tmpthread.daemon = True
                self.tmpthread.start()
        else:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("Another function already in progress. Please be patient.")
            msg.setWindowTitle("Error")
            msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
            msg.exec_()

    def status_but_func(self):
        if not self.s.is_alive():
            if self.conn_sequence() == None:
                return
            self.tmpthread = threading.Thread(target=self.run_status_cmd)
            self.tmpthread.daemon = True
            self.tmpthread.start()
        else:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("Another function already in progress. Please be patient.")
            msg.setWindowTitle("Error")
            msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
            msg.exec_()

    def miner_ping_func(self):
        if not self.s.is_alive():
            if self.conn_sequence() == None:
                return
            self.tmpthread = threading.Thread(target=self.run_miner_ping_cmd)
            self.tmpthread.daemon = True
            self.tmpthread.start()
        else:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("Another function already in progress. Please be patient.")
            msg.setWindowTitle("Error")
            msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
            msg.exec_()

    def run_peer_book_func(self):
        if not self.s.is_alive():
            if self.conn_sequence() == None:
                    return
            messageBox = QtWidgets.QMessageBox(self)
            messageBox.setWindowTitle("Peerbook Mode Selection")
            messageBox.setText("Please select Peerbook Mode:")
            
            buttonoptionA = messageBox.addButton("peerbook -s", QtWidgets.QMessageBox.YesRole)    
            buttonoptionB = messageBox.addButton("peerbook -c", QtWidgets.QMessageBox.AcceptRole)  
            messageBox.setDefaultButton(buttonoptionA)
            
            messageBox.exec_()

            if messageBox.clickedButton() == buttonoptionA:
                self.tmpthread = threading.Thread(target=self.run_peer_book_s_cmd)
                self.tmpthread.daemon = True
                self.tmpthread.start()
            elif messageBox.clickedButton() == buttonoptionB:
                self.tmpthread = threading.Thread(target=self.run_peer_book_c_cmd)
                self.tmpthread.daemon = True
                self.tmpthread.start()
        else:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("Another function already in progress. Please be patient.")
            msg.setWindowTitle("Error")
            msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
            msg.exec_()

    def run_command_func(self):
        if not self.s.is_alive():
            if self.conn_sequence() == None:
                return
            self.tmpthread = threading.Thread(target=self.run_line_command_cmd)
            self.tmpthread.daemon = True
            self.tmpthread.start()
        else:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("Another function already in progress. Please be patient.")
            msg.setWindowTitle("Error")
            msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
            msg.exec_()

    def sync_resume_func(self):
        if not self.s.is_alive():
            if self.conn_sequence() == None:
                return
            self.tmpthread = threading.Thread(target=self.run_sync_resume)
            self.tmpthread.daemon = True
            self.tmpthread.start()
        else:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("Another function already in progress. Please be patient.")
            msg.setWindowTitle("Error")
            msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
            msg.exec_()

    def open_explorer_func(self):
        if not self.s.is_alive():
            if self.conn_sequence() == None:
                return
            self.tmpthread = threading.Thread(target=self.run_open_explorer_cmd)
            self.tmpthread.daemon = True
            self.tmpthread.start()
        else:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("Another function already in progress. Please be patient.")
            msg.setWindowTitle("Error")
            msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
            msg.exec_()

    def process_logs_func(self):
        if not self.s.is_alive():
            if self.conn_sequence() == None:
                    return
            messageBox = QtWidgets.QMessageBox(self)
            messageBox.setWindowTitle("Processlogs Mode Selection")
            messageBox.setText("Please select Processlogs Mode:")
            
            buttonoptionA = messageBox.addButton("Statistics", QtWidgets.QMessageBox.YesRole)    
            buttonoptionB = messageBox.addButton("Witness list", QtWidgets.QMessageBox.AcceptRole)  
            messageBox.setDefaultButton(buttonoptionA)
            
            messageBox.exec_()

            if messageBox.clickedButton() == buttonoptionA:
                self.tmpthread = threading.Thread(target=self.run_process_logs_cmd)
                self.tmpthread.daemon = True
                self.tmpthread.start()
            elif messageBox.clickedButton() == buttonoptionB:
                self.tmpthread = threading.Thread(target=self.run_process_logs_l_cmd)
                self.tmpthread.daemon = True
                self.tmpthread.start()
        else:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("Another function already in progress. Please be patient.")
            msg.setWindowTitle("Error")
            msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
            msg.exec_()

    #################### commands
    def run_process_logs_cmd(self):
        combopos = self.combo_select_miner.currentIndex()
        if len(minerconfig.shape) == 1 and not minerconfig.shape == (0,):
            mname = minerconfig[0]
        else:
            mname = minerconfig[combopos][0]
        timestr = time.strftime("%Y%m%d")
        filename = "processlogs/logs/archive/" + mname + "-console-" + timestr + ".log"
        if not os.path.exists('processlogs/logs'):
            os.makedirs('processlogs/logs')
        if not os.path.exists('processlogs/logs/archive'):
            os.makedirs('processlogs/logs/archive')
        path = "/mnt/mmcblk0p1/miner_data/log/console.log"
        self.update_fbdata(f'Downloading console.log from miner...\n\n')
        self.s.scp_file(path=path)
        shutil.copyfile('processlogs\logs\console.log', filename)
        self.update_fbdata(f'Processing logs ...\n')
        self.s.disconnect()
        try:
            cmdCommand = "processlogs\php\php.exe processlogs\processlogs.php -p processlogs\logs"   #specify your cmd command
            process = subprocess.Popen(cmdCommand.split(), stdout=subprocess.PIPE)
            out, error = process.communicate()
            self.update_fbdata(out.decode("utf-8"))
        except Exception as e:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText(str(e))
            msg.setWindowTitle("Error")
            msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
            msg.exec_()

    def run_process_logs_l_cmd(self):
        combopos = self.combo_select_miner.currentIndex()
        if len(minerconfig.shape) == 1 and not minerconfig.shape == (0,):
            mname = minerconfig[0]
        else:
            mname = minerconfig[combopos][0]
        timestr = time.strftime("%Y%m%d")
        filename = "processlogs/logs/archive/" + mname + "-console-" + timestr + ".log"
        if not os.path.exists('processlogs/logs'):
            os.makedirs('processlogs/logs')
        if not os.path.exists('processlogs/logs/archive'):
            os.makedirs('processlogs/logs/archive')
        path = "/mnt/mmcblk0p1/miner_data/log/console.log"
        self.update_fbdata(f'Downloading console.log from miner...\n\n')
        self.s.scp_file(path=path)
        shutil.copyfile('processlogs\logs\console.log', filename)
        self.update_fbdata(f'Processing logs ...\n')
        self.s.disconnect()
        try:
            cmdCommand = "processlogs\php\php.exe processlogs\processlogs.php -p processlogs\logs -l"   #specify your cmd command
            process = subprocess.Popen(cmdCommand.split(), stdout=subprocess.PIPE)
            out, error = process.communicate()
            self.update_fbdata(out.decode("utf-8"))
        except Exception as e:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText(str(e))
            msg.setWindowTitle("Error")
            msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
            msg.exec_()

    def run_quagga_cmd(self):
        try:
            cmd = '/etc/init.d/quagga restart'
            self.update_fbdata(f'${cmd}\n')
            out, stderr = self.s.exec_cmd(cmd=cmd)
            self.update_fbdata(out)
            if stderr != '': self.update_fbdata(f'STDERR: {stderr}')
            self.update_fbdata(f'*** DONE ***\n')
            self.s.disconnect()
        except Exception as e:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText(str(e))
            msg.setWindowTitle("Error")
            msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
            msg.exec_()

    def run_open_explorer_cmd(self):
        try:
            cmds = ['docker exec miner miner info onboarding']
            self.update_fbdata(f'Generating Helium Explorer Link ...\n')
            for idx, cmd in enumerate(cmds):
                out, stderr = self.s.exec_cmd(cmd=cmd)
                if stderr != '': self.update_fbdata(f'STDERR: {stderr}')
                miner_addr = out.split('publicAddress')[1].split('|')[1].split('|')[0]
            minerurl = 'https://explorer.helium.com/hotspots/%s' % miner_addr
            webbrowser.open(minerurl, new=0, autoraise=True)
            self.update_fbdata(f'*** DONE ***\n')
            self.s.disconnect()
        except Exception as e:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText(str(e))
            msg.setWindowTitle("Error")
            msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
            msg.exec_()

    def run_status_cmd(self):
        try:
            cmds = ['docker exec miner miner info name', 
                    'docker exec miner miner info p2p_status',
                    'curl -k --connect-timeout 10 https://api.helium.io/v1/blocks/height',
                    'cat /sys/class/thermal/thermal_zone0/temp']
            self.update_fbdata(f'Miner Name: ')
            for idx, cmd in enumerate(cmds):
                try:
                    out, stderr = self.s.exec_cmd(cmd=cmd)
                    if idx == 0:
                        self.update_fbdata(out)
                        self.update_fbdata('\n')
                    if idx == 1:
                        self.update_fbdata(out)
                        if stderr != '': self.update_fbdata(f'STDERR: {stderr}')
                        miner_height = int(out.split('height')[1].split('|')[1].split('|')[0])
                    elif idx == 2:
                        blockchain_height = int(out.split('height":')[1].split('}')[0])
                    elif idx == 3:
                        cpu_temp = int(out)
                except:
                    msg = QMessageBox()
                    msg.setIcon(QMessageBox.Critical)
                    msg.setText("One or more input flieds are empty!")
                    msg.setWindowTitle("Error connecting")
                    msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
                    msg.exec_()
            temp = cpu_temp / 1000
            self.update_fbdata(f'CPU Temperature: {temp}°C\n\n')
            diff = miner_height - blockchain_height
            self.update_fbdata(f'Blockchain height: %s\n' % blockchain_height)
            self.update_fbdata(f'Miner height: %s\n\n' % miner_height)
            if diff > 0:
                self.update_fbdata(f'-> Miner {diff} blocks ahead of the blockchain! (SYNCED)\n')
            elif diff < 0:
                self.update_fbdata(f'-> Miner trailing {diff} blocks behind the blockchain. (SYNCING)\n')
            else:
                self.update_fbdata(f'-> Miner in complete sync with the blockchain! (SYNCED)\n')
            self.update_fbdata(f'*** DONE ***\n')
            self.s.disconnect()
        except Exception as e:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText(str(e))
            msg.setWindowTitle("Error")
            msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
            msg.exec_()

    def run_restart_lora_cmd(self):
        try:
            cmds = ['/etc/init.d/lora_pkt_fwd stop',
                    '/etc/init.d/lora_pkt_fwd start',
                    'ps | grep lora_pkt_fwd']
            self.update_fbdata(f'Restarting LoRA Packet Forwarder...\n')
            for idx, cmd in enumerate(cmds):
                self.update_fbdata(f'${cmd}\n')
                out, stderr = self.s.exec_cmd(cmd=cmd)
                self.update_fbdata(out)
                self.update_fbdata(f'\n')
            self.update_fbdata(f'*** DONE ***\n')
            self.s.disconnect()
        except Exception as e:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText(str(e))
            msg.setWindowTitle("Error")
            msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
            msg.exec_()

    def run_miner_ping_cmd(self):
        try:
            cmd = 'ping -c 20 -q google.com'
            self.update_fbdata(f'${cmd}\n')
            out, stderr = self.s.exec_cmd(cmd=cmd)
            self.update_fbdata(out)
            if stderr != '': self.update_fbdata(f'STDERR: {stderr}')
            self.update_fbdata(f'*** DONE ***\n')
            self.s.disconnect()
        except Exception as e:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText(str(e))
            msg.setWindowTitle("Error")
            msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
            msg.exec_()

    def run_restart_miner_cmd(self):
        try:
            cmd = 'reboot now'
            self.update_fbdata(f'${cmd}\n')
            out, stderr = self.s.exec_cmd(cmd=cmd)
            self.update_fbdata(out)
            if stderr != '': self.update_fbdata(f'STDERR: {stderr}')
            self.update_fbdata(f'*** DONE ***\n')
            self.s.disconnect()
        except Exception as e:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText(str(e))
            msg.setWindowTitle("Error")
            msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
            msg.exec_()

    def run_abort_cmd(self):
        try:
            self.s.disconnect()
            self.howto()
        except Exception as e:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText(str(e))
            msg.setWindowTitle("Error")
            msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
            msg.exec_()

    def run_restart_docker_cmd(self):
        try:
            cmd = 'docker stop miner && docker start miner'
            self.update_fbdata(f'${cmd}\n')
            out, stderr = self.s.exec_cmd(cmd=cmd)
            self.update_fbdata(out)
            if stderr != '': self.update_fbdata(f'STDERR: {stderr}')
            self.update_fbdata(f'*** DONE ***\n')
            self.s.disconnect()
        except Exception as e:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText(str(e))
            msg.setWindowTitle("Error")
            msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
            msg.exec_()

    def run_sync_status_log_cmd(self):
        try:
            cmd = 'docker exec miner miner repair sync_state'
            self.update_fbdata(f'${cmd}\n')
            out, stderr = self.s.exec_cmd(cmd=cmd)
            self.update_fbdata(out)
            if stderr != '': self.update_fbdata(f'STDERR: {stderr}')
            self.update_fbdata(f'*** DONE ***\n')
            self.s.disconnect()
        except Exception as e:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText(str(e))
            msg.setWindowTitle("Error")
            msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
            msg.exec_()

    def run_disk_usage_cmd(self):
        try:
            cmd = 'df -h /mnt/mmcblk0p1'
            self.update_fbdata(f'${cmd}\n')
            out, stderr = self.s.exec_cmd(cmd=cmd)
            self.update_fbdata(out)
            if stderr != '': self.update_fbdata(f'STDERR: {stderr}')
            self.update_fbdata(f'*** DONE ***\n')
            self.s.disconnect()
        except Exception as e:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText(str(e))
            msg.setWindowTitle("Error")
            msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
            msg.exec_()

    def docker_console_log_cmd(self):
        try:
            cmd = 'docker exec miner cat /var/data/log/console.log'
            self.update_fbdata(f'${cmd}\n')
            out, stderr = self.s.exec_cmd(cmd=cmd)
            self.update_fbdata(out)
            if stderr != '': self.update_fbdata(f'STDERR: {stderr}')
            self.update_fbdata(f'*** DONE ***\n')
            self.s.disconnect()
        except Exception as e:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText(str(e))
            msg.setWindowTitle("Error")
            msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
            msg.exec_()

    def run_peer_book_c_cmd(self):
        try:
            cmd = 'docker exec miner miner peer book -c'
            self.update_fbdata(f'${cmd}\n')
            out, stderr = self.s.exec_cmd(cmd=cmd)
            self.update_fbdata(out)
            if stderr != '': self.update_fbdata(f'STDERR: {stderr}')
            self.update_fbdata(f'*** DONE ***\n')
            self.s.disconnect()
        except Exception as e:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText(str(e))
            msg.setWindowTitle("Error")
            msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
            msg.exec_()

    def run_peer_book_s_cmd(self):
        try:
            cmd = 'docker exec miner miner peer book -s'
            self.update_fbdata(f'${cmd}\n')
            out, stderr = self.s.exec_cmd(cmd=cmd)
            self.update_fbdata(out)
            if stderr != '': self.update_fbdata(f'STDERR: {stderr}')
            self.update_fbdata(f'*** DONE ***\n')
            self.s.disconnect()
        except Exception as e:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText(str(e))
            msg.setWindowTitle("Error")
            msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
            msg.exec_()

    def run_line_command_cmd(self):
        try:
            cmd = self.lineedit_line_command.text()
            self.update_fbdata(f'${cmd}\n')
            out, stderr = self.s.exec_cmd(cmd=cmd)
            self.update_fbdata(out)
            if stderr != '': self.update_fbdata(f'STDERR: {stderr}')
            self.update_fbdata(f'*** DONE ***\n')
            self.s.disconnect()
        except Exception as e:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText(str(e))
            msg.setWindowTitle("Error")
            msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
            msg.exec_()

    def run_sync_resume(self):
        try:
            cmd = 'docker exec miner miner repair sync_resume'
            self.update_fbdata(f'${cmd}\n')
            out, stderr = self.s.exec_cmd(cmd=cmd)
            self.update_fbdata(out)
            if stderr != '': self.update_fbdata(f'STDERR: {stderr}')
            self.update_fbdata(f'*** DONE ***\n')
            self.s.disconnect()
        except Exception as e:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText(str(e))
            msg.setWindowTitle("Error")
            msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
            msg.exec_()

# Connect Sequence
    def conn_sequence(self):
        try:
            combopos = self.combo_select_miner.currentIndex()
            if len(minerconfig.shape) == 1 and not minerconfig.shape == (0,):
                addr = minerconfig[1]
                user = minerconfig[2]
                passwd = minerconfig[3]
                port = minerconfig[4]
            else:
                addr = minerconfig[combopos][1]
                user = minerconfig[combopos][2]
                passwd = minerconfig[combopos][3]
                port = minerconfig[combopos][4]
            if addr[-1] == 'X':
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Critical)
                msg.setText("Enter device IP address.")
                msg.setWindowTitle("Error")
                msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
                msg.exec_()
                return None
            if not self.validate_ip_address(addr):
                try:
                    dns = addr 
                    addr = socket.gethostbyname(dns)
                    print("Adresse: %s" % addr)
                except:
                    msg = QMessageBox()
                    msg.setIcon(QMessageBox.Critical)
                    msg.setText("Invalid IP or DNS address.")
                    msg.setWindowTitle("Error")
                    msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
                    msg.exec_()
                    print("Adresse: %s" % addr)
                    return None
            if any([x==None for x in [user, passwd]]):
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Critical)
                msg.setText("Error reading options.config file.")
                msg.setWindowTitle("Error")
                msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
                msg.exec_()
                return None
            args = [addr, user, int(port), passwd]
            if all([arg != None for arg in args]):
                self.addr, self.user, self.port, self.passwd = args
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(1)
            if sock.connect_ex((addr, int(port))) != 0:
                sock.close()
                self.throw_trouble_connecting_error()
                return None
            sock.close()
            self.s.set_config(addr=addr, user=user, port=port, password=passwd)
            connection = self.s.connect()
            self.clear_fbdata()
            if not self.s.is_alive() or connection == None:
                self.update_fbdata(f'Connection Error.\n')
                self.update_fbdata(f'%s' % connection)
                return None
            return True
        except Exception as e:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText(str(e))
            msg.setWindowTitle("Error")
            msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
            msg.exec_()

    def update_fbdata(self, d):
        try:
            self.text_console.insertPlainText(d)
        except Exception as e:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText(str(e))
            msg.setWindowTitle("Error")
            msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
            msg.exec_()

    def clear_fbdata(self):
        try:
            self.text_console.clear()
        except Exception as e:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText(str(e))
            msg.setWindowTitle("Error")
            msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
            msg.exec_()


    def validate_ip_address(self, address):
        try:
            ip = ipaddress.ip_address(address)
            return True
        except ValueError:
            return False

    def save(self):
        try:
            with open(self.savepath, 'w') as f:
                f.write(self.log)
        except Exception as e:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText(str(e))
            msg.setWindowTitle("Error")
            msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
            msg.exec_()
#*************************** BUTTON FUNCTIONS ***************************

#**************************** THROW ERROR ****************************
    def throw_trouble_connecting_error(self):
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Critical)
        msg.setText("Having trouble connecting to device.")
        msg.setWindowTitle("Error")
        msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
        msg.exec_()

    def throw_custom_error(self, title, message):
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Critical)
        msg.setText(message)
        msg.setWindowTitle(title)
        msg.setWindowIcon(QtGui.QIcon('assets/helium.ico'))
        msg.exec_()
#**************************** THROW ERROR ****************************

##################################################################
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Miner Tools"))
        self.label_select_miner.setText(_translate("MainWindow", "Select Miner:"))
        self.button_open_in_browser.setText(_translate("MainWindow", "Open in Browser"))
        self.button_settings.setText(_translate("MainWindow", "Settings"))
        self.button_helium_explorer.setText(_translate("MainWindow", "Helium Explorer"))
        self.button_check_update.setText(_translate("MainWindow", "Check Update"))
        self.label_version.setText(_translate("MainWindow", "Version:"))
        self.label_version_numer.setText(_translate("MainWindow", version_build))
        self.button_donate.setText(_translate("MainWindow", "Donate"))
        self.button_status.setText(_translate("MainWindow", "Status"))
        self.button_ping.setText(_translate("MainWindow", "PING"))
        self.button_sync_status.setText(_translate("MainWindow", "Sync Status"))
        self.button_peer_book.setText(_translate("MainWindow", "Peer Book"))
        self.button_console_log.setText(_translate("MainWindow", "Console Log"))
        self.button_process_logs.setText(_translate("MainWindow", "Process Logs"))
        self.button_disk_usage.setText(_translate("MainWindow", "Disk Usage"))
        self.button_fast_sync.setText(_translate("MainWindow", "Fast Sync"))
        self.button_restart_lora.setText(_translate("MainWindow", "Restart LoRa"))
        self.button_resume_sync.setText(_translate("MainWindow", "Resume Sync"))
        self.button_restart_docker.setText(_translate("MainWindow", "Restart Docker"))
        self.button_quagga_restart.setText(_translate("MainWindow", "Quagga Restart"))
        self.button_restart_miner.setText(_translate("MainWindow", "Restart Miner"))
        self.lineedit_line_command.setText(_translate("MainWindow", "uptime"))
        self.button_send_command.setText(_translate("MainWindow", "Send Command"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.action_exit.setText(_translate("MainWindow", "Exit"))
        self.action_import_config.setText(_translate("MainWindow", "Import Config"))
        self.action_export_config.setText(_translate("MainWindow", "Export Config"))
        self.action_edit_config.setText(_translate("MainWindow", "Edit Config"))